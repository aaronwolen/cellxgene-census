[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 Chan Zuckerberg Initiative Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/census_axis_query.html","id":"axis-query-example","dir":"Articles","previous_headings":"","what":"Axis Query Example","title":"Axis Query Example","text":"Goal: demonstrate basic axis metadata handling. CZ CELLxGENE Census stores obs (cell) metadata SOMA DataFrame, can queried read R data frame. Census also convenience package simplifies opening census. R data frames -memory objects. Take care queries small enough results fit memory.","code":""},{"path":"/articles/census_axis_query.html","id":"opening-the-census","dir":"Articles","previous_headings":"Axis Query Example","what":"Opening the census","title":"Axis Query Example","text":"cellxgene.census R package contains convenient API open latest version Census. can learn cellxgene.census methods accessing corresponding documentation. example ?cellxgene.census::open_soma.","code":"census <- cellxgene.census::open_soma()"},{"path":"/articles/census_axis_query.html","id":"summarize-census-cell-metadata","dir":"Articles","previous_headings":"Axis Query Example","what":"Summarize Census cell metadata","title":"Axis Query Example","text":"Tips: can read entire SOMA dataframe R using .data.frame(soma_df$read()). Queries much faster request DataFrame columns required analysis (e.g. column_names = c(\"soma_joinid\", \"cell_type_ontology_term_id\")). can also refine query results using value_filter, filter census matching records.","code":""},{"path":"/articles/census_axis_query.html","id":"summarize-all-cell-types","dir":"Articles","previous_headings":"Axis Query Example > Summarize Census cell metadata","what":"Summarize all cell types","title":"Axis Query Example","text":"example reads cell metadata (obs) R data frame summarize variety ways.","code":"human <- census$get(\"census_data\")$get(\"homo_sapiens\")  # Read obs into an R data frame (tibble). obs_df <- as.data.frame(human$obs$read(   column_names = c(\"soma_joinid\", \"cell_type_ontology_term_id\") ))  # Find all unique values in the cell_type_ontology_term_id column. unique_cell_type_ontology_term_id <- unique(obs_df$cell_type_ontology_term_id)  cat(paste(   \"There are\",   length(unique_cell_type_ontology_term_id),   \"cell types in the Census! The first few are:\" )) #> There are 596 cell types in the Census! The first few are: head(unique_cell_type_ontology_term_id) #> [1] \"CL:0000128\" \"CL:4023040\" \"CL:4023012\" \"CL:0002453\" \"CL:4023018\" #> [6] \"CL:4023017\""},{"path":"/articles/census_axis_query.html","id":"summarize-a-subset-of-cell-types-selected-with-a-value_filter","dir":"Articles","previous_headings":"Axis Query Example > Summarize Census cell metadata","what":"Summarize a subset of cell types, selected with a value_filter","title":"Axis Query Example","text":"example utilizes SOMA “value filter” read subset cells tissue_ontology_term_id equal UBERON:0002048 (lung tissue), summarizes query result. can also define much complex value filters. example: combine terms use %% operator query multiple values","code":"# Read cell_type terms for cells which have a specific tissue term LUNG_TISSUE <- \"UBERON:0002048\"  obs_df <- as.data.frame(human$obs$read(   column_names = c(\"cell_type_ontology_term_id\"),   value_filter = paste(\"tissue_ontology_term_id == '\", LUNG_TISSUE, \"'\", sep = \"\") ))  # Find all unique values in the cell_type_ontology_term_id column as an R data frame. unique_cell_type_ontology_term_id <- unique(obs_df$cell_type_ontology_term_id) cat(paste(   \"There are \",   length(unique_cell_type_ontology_term_id),   \" cell types in the Census where tissue_ontology_term_id == \",   LUNG_TISSUE,   \"!\\nThe first few are:\",   sep = \"\" )) #> There are 174 cell types in the Census where tissue_ontology_term_id == UBERON:0002048! #> The first few are: head(unique_cell_type_ontology_term_id) #> [1] \"CL:0008019\" \"CL:0000067\" \"CL:0000138\" \"CL:0000814\" \"CL:0000765\" #> [6] \"CL:0000115\"  # Report the 10 most common top_10 <- sort(table(obs_df$cell_type_ontology_term_id), decreasing = TRUE)[1:10] cat(paste(\"The top 10 cell types where tissue_ontology_term_id ==\", LUNG_TISSUE)) #> The top 10 cell types where tissue_ontology_term_id == UBERON:0002048 print(top_10) #>  #> CL:0000583 CL:0000624 CL:0000235 CL:0000625 CL:0002063 CL:0000860 CL:0001064  #>     330014     263132     254173     242895     163561     159145     149067  #> CL:0000623 CL:0002632 CL:0000499  #>     134368     126058     109286 # You can also do more complex queries, such as testing for inclusion in a list of values obs_df <- as.data.frame(human$obs$read(   column_names = c(\"cell_type_ontology_term_id\"),   value_filter = \"tissue_ontology_term_id %in% c('UBERON:0002082', 'UBERON:OOO2084', 'UBERON:0002080')\" ))  # Summarize top_10 <- sort(table(obs_df$cell_type_ontology_term_id), decreasing = TRUE)[1:10] print(top_10) #>  #> CL:0000746 CL:0008034 CL:0002548 CL:0000115 CL:0002131 CL:0000763 CL:0000669  #>     159096      84750      79618      64190      61830      32088      27515  #> CL:0000003 CL:0000057 CL:0002144  #>      22707      20117      18593"},{"path":"/articles/census_axis_query.html","id":"full-census-stats","dir":"Articles","previous_headings":"Axis Query Example > Summarize Census cell metadata","what":"Full census stats","title":"Axis Query Example","text":"example queries organisms Census, summarizes diversity various metadata labels.","code":"cols_to_query <- c(   \"cell_type_ontology_term_id\",   \"assay_ontology_term_id\",   \"tissue_ontology_term_id\" )  total_cells <- 0 for (organism in census$get(\"census_data\")$names()) {   print(organism)   obs_df <- as.data.frame(     census$get(\"census_data\")$get(organism)$obs$read(column_names = cols_to_query)   )   total_cells <- total_cells + nrow(obs_df)   for (col in cols_to_query) {     cat(paste(\"  Unique \", col, \" values: \", length(unique(obs_df[[col]])), \"\\n\", sep = \"\"))   } } #> [1] \"homo_sapiens\" #>   Unique cell_type_ontology_term_id values: 596 #>   Unique assay_ontology_term_id values: 20 #>   Unique tissue_ontology_term_id values: 217 #> [1] \"mus_musculus\" #>   Unique cell_type_ontology_term_id values: 226 #>   Unique assay_ontology_term_id values: 9 #>   Unique tissue_ontology_term_id values: 51 cat(paste(\"Complete Census contains\", total_cells, \"cells.\")) #> Complete Census contains 51572909 cells."},{"path":"/articles/census_dataset_presence.html","id":"is-a-feature-present-in-a-dataset","dir":"Articles","previous_headings":"","what":"Is a feature present in a dataset?","title":"Census datasets presence","text":"Goal: test given feature present given dataset. Important: (one-based) indexes sparse presence matrix correspond (zero-based) soma_joinid + 1. words: first dimension presence matrix (one plus) dataset’s soma_joinid stored census_datasets dataframe. second dimension presence matrix (one plus) feature’s soma_joinid stored var dataframe.","code":"var_joinid <- var_df$soma_joinid[var_df$feature_id == \"ENSG00000286096\"] dataset_joinid <- datasets_df$soma_joinid[datasets_df$dataset_id == \"97a17473-e2b1-4f31-a544-44a60773e2dd\"] is_present <- presence_matrix[dataset_joinid + 1, var_joinid + 1] cat(paste(\"Feature is\", if (is_present) \"present.\" else \"not present.\")) #> Feature is present."},{"path":"/articles/census_dataset_presence.html","id":"what-datasets-contain-a-feature","dir":"Articles","previous_headings":"","what":"What datasets contain a feature?","title":"Census datasets presence","text":"Goal: look datasets feature_id present.","code":"# Grab the feature's soma_joinid from the var dataframe var_joinid <- var_df$soma_joinid[var_df$feature_id == \"ENSG00000286096\"]  # The presence matrix is indexed by the joinids of the dataset and var dataframes, # so slice out the feature of interest by its joinid. dataset_joinids <- datasets_df$soma_joinid[presence_matrix[, var_joinid + 1] != 0]  print(datasets_df[dataset_joinids + 1, ]) #> # A tibble: 24 × 8 #>    soma_joinid collection_id           collection_name collection_doi dataset_id #>          <int> <chr>                   <chr>           <chr>          <chr>      #>  1          83 283d65eb-dd53-496d-adb… Transcriptomic… 10.1101/2022.… fe1a73ab-… #>  2          87 283d65eb-dd53-496d-adb… Transcriptomic… 10.1101/2022.… f8dda921-… #>  3         104 283d65eb-dd53-496d-adb… Transcriptomic… 10.1101/2022.… dd03ce70-… #>  4         109 283d65eb-dd53-496d-adb… Transcriptomic… 10.1101/2022.… d2b5efc1-… #>  5         119 283d65eb-dd53-496d-adb… Transcriptomic… 10.1101/2022.… c4b03352-… #>  6         120 283d65eb-dd53-496d-adb… Transcriptomic… 10.1101/2022.… c2aad8fc-… #>  7         121 283d65eb-dd53-496d-adb… Transcriptomic… 10.1101/2022.… c202b243-… #>  8         122 283d65eb-dd53-496d-adb… Transcriptomic… 10.1101/2022.… bdb26abd-… #>  9         127 283d65eb-dd53-496d-adb… Transcriptomic… 10.1101/2022.… acae7679-… #> 10         140 283d65eb-dd53-496d-adb… Transcriptomic… 10.1101/2022.… 9372df2d-… #> # ℹ 14 more rows #> # ℹ 3 more variables: dataset_title <chr>, dataset_h5ad_path <chr>, #> #   dataset_total_cell_count <int>"},{"path":"/articles/census_dataset_presence.html","id":"what-features-are-in-a-dataset","dir":"Articles","previous_headings":"","what":"What features are in a dataset?","title":"Census datasets presence","text":"Goal: lookup features present given dataset. example also demonstrates ability query multiple datasets.","code":"# Slice the dataset(s) of interest, and get the joinid(s) dataset_joinids <- datasets_df$soma_joinid[datasets_df$collection_id == \"17481d16-ee44-49e5-bcf0-28c0780d8c4a\"]  # Slice the presence matrix by the first dimension, i.e., by dataset var_joinids <- var_df$soma_joinid[which(Matrix::colSums(presence_matrix[dataset_joinids + 1, ]) > 0)]  print(var_df[var_joinids + 1, ]) #> # A tibble: 27,211 × 4 #>    soma_joinid feature_id      feature_name feature_length #>          <int> <chr>           <chr>                 <int> #>  1           0 ENSG00000000003 TSPAN6                 4536 #>  2           1 ENSG00000000005 TNMD                   1476 #>  3           2 ENSG00000000419 DPM1                   9276 #>  4           3 ENSG00000000457 SCYL3                  6883 #>  5           4 ENSG00000000460 C1orf112               5970 #>  6           5 ENSG00000000938 FGR                    3382 #>  7           6 ENSG00000000971 CFH                    7980 #>  8           7 ENSG00000001036 FUCA2                  2822 #>  9           8 ENSG00000001084 GCLC                   8618 #> 10           9 ENSG00000001167 NFYA                   6209 #> # ℹ 27,201 more rows"},{"path":"/articles/census_query_extract.html","id":"opening-the-census","dir":"Articles","previous_headings":"","what":"Opening the census","title":"Querying and fetching the single-cell data and cell/gene metadata","text":"cellxgene.census R package contains convenient API open latest version Census. can learn cellxgene.census methods accessing corresponding documentation, example ?cellxgene.census::open_soma.","code":"census <- cellxgene.census::open_soma()"},{"path":"/articles/census_query_extract.html","id":"querying-cell-metadata-obs","dir":"Articles","previous_headings":"","what":"Querying cell metadata (obs)","title":"Querying and fetching the single-cell data and cell/gene metadata","text":"human gene metadata Census, RNA assays, located census$get(\"census_data\")$get(\"homo_sapiens\")$obs. SOMADataFrame can materialized R data frame (tibble) using .data.frame(obs$read()). mouse cell metadata census$get(\"census_data\")$get(\"mus_musculus\").obs. slicing cell metadata two relevant arguments can passed read(): column_names — character vector indicating metadata columns fetch. Expressions one comparisons Comparisons one <column> <op> <value> <column> <op> <column> Expressions can combine comparisons using && || op one < | > | <= | >= | == | != %% learn metadata columns available fetching filtering can directly look keys cell metadata. soma_joinid special SOMADataFrame column used join operations. definition columns can found Census schema. can used fetch specific columns specific rows matching condition. latter need know values looking priori. example let’s see possible values available sex. can load cell metadata fetching column sex. can see three different values sex, \"male\", \"female\" \"unknown\". information can fetch cell metatadata specific sex value, example \"unknown\". can use column_names value_filter perform specific queries. example let’s fetch disease column cell_type \"B cell\" tissue_general \"lung\".","code":"census$get(\"census_data\")$get(\"homo_sapiens\")$obs$colnames() #>  [1] \"soma_joinid\"                              #>  [2] \"dataset_id\"                               #>  [3] \"assay\"                                    #>  [4] \"assay_ontology_term_id\"                   #>  [5] \"cell_type\"                                #>  [6] \"cell_type_ontology_term_id\"               #>  [7] \"development_stage\"                        #>  [8] \"development_stage_ontology_term_id\"       #>  [9] \"disease\"                                  #> [10] \"disease_ontology_term_id\"                 #> [11] \"donor_id\"                                 #> [12] \"is_primary_data\"                          #> [13] \"self_reported_ethnicity\"                  #> [14] \"self_reported_ethnicity_ontology_term_id\" #> [15] \"sex\"                                      #> [16] \"sex_ontology_term_id\"                     #> [17] \"suspension_type\"                          #> [18] \"tissue\"                                   #> [19] \"tissue_ontology_term_id\"                  #> [20] \"tissue_general\"                           #> [21] \"tissue_general_ontology_term_id\" unique(as.data.frame(census$get(\"census_data\")$get(\"homo_sapiens\")$obs$read(column_names = \"sex\"))) #> # A tibble: 3 × 1 #>   sex     #>   <chr>   #> 1 female  #> 2 male    #> 3 unknown as.data.frame(census$get(\"census_data\")$get(\"homo_sapiens\")$obs$read(value_filter = \"sex == 'unknown'\")) #> # A tibble: 2,112,935 × 21 #>    soma_joinid dataset_id  assay assay_ontology_term_id cell_type cell_type_ontology_t…¹ #>          <int> <chr>       <chr> <chr>                  <chr>     <chr>                  #>  1     1226855 3f32121d-1… 10x … EFO:0009899            endothel… CL:0002138             #>  2     1226856 3f32121d-1… 10x … EFO:0009899            enterocy… CL:0000584             #>  3     1226857 3f32121d-1… 10x … EFO:0009899            enterocy… CL:0000584             #>  4     1226858 3f32121d-1… 10x … EFO:0009899            fibrobla… CL:0000057             #>  5     1226859 3f32121d-1… 10x … EFO:0009899            T cell    CL:0000084             #>  6     1226860 3f32121d-1… 10x … EFO:0009899            macropha… CL:0000235             #>  7     1226861 3f32121d-1… 10x … EFO:0009899            fibrobla… CL:0000057             #>  8     1226862 3f32121d-1… 10x … EFO:0009899            fibrobla… CL:0000057             #>  9     1226863 3f32121d-1… 10x … EFO:0009899            enterocy… CL:0000584             #> 10     1226864 3f32121d-1… 10x … EFO:0009899            fibrobla… CL:0000057             #> # ℹ 2,112,925 more rows #> # ℹ abbreviated name: ¹​cell_type_ontology_term_id #> # ℹ 15 more variables: development_stage <chr>, #> #   development_stage_ontology_term_id <chr>, disease <chr>, #> #   disease_ontology_term_id <chr>, donor_id <chr>, is_primary_data <lgl>, #> #   self_reported_ethnicity <chr>, self_reported_ethnicity_ontology_term_id <chr>, #> #   sex <chr>, sex_ontology_term_id <chr>, suspension_type <chr>, tissue <chr>, … cell_metadata_b_cell <- as.data.frame(   census$get(\"census_data\")$get(\"homo_sapiens\")$obs$read(     value_filter = \"cell_type == 'B cell' && tissue_general == 'lung'\",     column_names = \"disease\"   ) ) table(cell_metadata_b_cell) #> disease #> chronic obstructive pulmonary disease                              COVID-19  #>                                  4166                                  1104  #>                   lung adenocarcinoma         non-small cell lung carcinoma  #>                                 50228                                 17484  #>                                normal                   pulmonary emphysema  #>                                 17046                                  1512  #>             small cell lung carcinoma          squamous cell lung carcinoma  #>                                   583                                 11584"},{"path":"/articles/census_query_extract.html","id":"querying-gene-metadata-var","dir":"Articles","previous_headings":"","what":"Querying gene metadata (var)","title":"Querying and fetching the single-cell data and cell/gene metadata","text":"human gene metadata Census located census$get(\"census_data\")$get(\"homo_sapiens\")$ms$get(\"RNA\")$var. Similarly cell metadata, SOMADataFrame thus can also use method read(). mouse gene metadata census$get(\"census_data\")$get(\"mus_musculus\")$ms$get(\"RNA\")$var. Let’s take look metadata available column selection row filtering. exception soma_joinid columns defined Census schema. Similarly cell metadata, can use operations learn fetch gene metadata. example, get feature_name feature_length genes \"ENSG00000161798\" \"ENSG00000188229\" can following.","code":"census$get(\"census_data\")$get(\"homo_sapiens\")$ms$get(\"RNA\")$var$colnames() #> [1] \"soma_joinid\"    \"feature_id\"     \"feature_name\"   \"feature_length\" as.data.frame(   census$get(\"census_data\")$get(\"homo_sapiens\")$ms$get(\"RNA\")$var$read(     value_filter = \"feature_id %in% c('ENSG00000161798', 'ENSG00000188229')\",     column_names = c(\"feature_name\", \"feature_length\")   ) ) #> # A tibble: 2 × 2 #>   feature_name feature_length #>   <chr>                 <int> #> 1 AQP5                   1884 #> 2 TUBB4B                 2037"},{"path":"/articles/census_query_extract.html","id":"querying-expression-data","dir":"Articles","previous_headings":"","what":"Querying expression data","title":"Querying and fetching the single-cell data and cell/gene metadata","text":"convenient way query fetch expression data use get_seurat method cellxgene.census API. method combines column selection value filtering described obtain slices expression data based metadata queries. method return Seurat object, takes input census object, string organism, cell gene metadata can specify filters column selection described following arguments: obs_column_names — character vector indicating columns select cell metadata. obs_value_filter — expression selection conditions fetch cells meeting criteria. var_column_names — character vector indicating columns select gene metadata. var_value_filter — expression selection conditions fetch genes meeting criteria. example want fetch expression data : Genes \"ENSG00000161798\" \"ENSG00000188229\". \"B cells\" \"lung\" \"COVID-19\". gene metadata adding sex cell metadata. full description refer ?cellxgene.census::get_seurat.","code":"seurat_obj <- cellxgene.census::get_seurat(   census, \"Homo sapiens\",   obs_column_names = c(\"cell_type\", \"tissue_general\", \"disease\", \"sex\"),   var_value_filter = \"feature_id %in% c('ENSG00000161798', 'ENSG00000188229')\",   obs_value_filter = \"cell_type == 'B cell' && tissue_general == 'lung' && disease == 'COVID-19'\" ) #> Warning: No reductions found #> Warning: No graphs found in 'obsp' seurat_obj #> An object of class Seurat  #> 2 features across 1104 samples within 1 assay  #> Active assay: RNA (2 features, 0 variable features) head(seurat_obj@meta.data) #>                orig.ident nCount_RNA nFeature_RNA cell_type tissue_general  disease #> cell3308854 SeuratProject          0            0    B cell           lung COVID-19 #> cell3309254 SeuratProject          0            0    B cell           lung COVID-19 #> cell3309571 SeuratProject          0            0    B cell           lung COVID-19 #> cell3309597 SeuratProject          0            0    B cell           lung COVID-19 #> cell3309750 SeuratProject          0            0    B cell           lung COVID-19 #> cell3309768 SeuratProject          0            0    B cell           lung COVID-19 #>              sex #> cell3308854 male #> cell3309254 male #> cell3309571 male #> cell3309597 male #> cell3309750 male #> cell3309768 male head(seurat_obj$RNA@meta.features) #>                   feature_id feature_name feature_length #> feature10493 ENSG00000161798         AQP5           1884 #> feature16068 ENSG00000188229       TUBB4B           2037"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Chan Zuckerberg Initiative. Author, maintainer, copyright holder, funder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Chan Zuckerberg Initiative (2023). cellxgene.census: CZ CELLxGENE Discover Cell Census. R package version 0.0.0.9000, https://github.com/chanzuckerberg/cellxgene-census.","code":"@Manual{,   title = {cellxgene.census: CZ CELLxGENE Discover Cell Census},   author = {{Chan Zuckerberg Initiative}},   year = {2023},   note = {R package version 0.0.0.9000},   url = {https://github.com/chanzuckerberg/cellxgene-census}, }"},{"path":"/index.html","id":"cz-cellxgene-discover-census","dir":"","previous_headings":"","what":"CZ CELLxGENE Discover Cell Census","title":"CZ CELLxGENE Discover Cell Census","text":"cellxgene.census package provides API facilitate use CZ CELLxGENE Discover Census. information API project visit chanzuckerberg/cellxgene-census GitHub repo. Status: Pre-release, rapid development. Expect API changes. Also see Python API.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"CZ CELLxGENE Discover Cell Census","text":"can install development version cellxgene.census GitHub : (minimal apt dependencies: r-base cmake git)","code":"# install.packages(\"devtools\") devtools::install_github(\"chanzuckerberg/cellxgene-census/api/r/cellxgene.census\") print(cellxgene.census::open_soma())"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"CZ CELLxGENE Discover Cell Census","text":"basic example shows solve common problem:","code":"library(cellxgene.census) ## basic example code"},{"path":"/index.html","id":"for-more-help","dir":"","previous_headings":"","what":"For More Help","title":"CZ CELLxGENE Discover Cell Census","text":"help, please file issue repo, contact us soma@chanzuckerberg.com believe found security issue, appreciate notification. Please send email security@chanzuckerberg.com.","code":""},{"path":"/reference/download_source_h5ad.html","id":null,"dir":"Reference","previous_headings":"","what":"Download source H5AD to local file name. — download_source_h5ad","title":"Download source H5AD to local file name. — download_source_h5ad","text":"Download source H5AD local file name.","code":""},{"path":"/reference/download_source_h5ad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download source H5AD to local file name. — download_source_h5ad","text":"","code":"download_source_h5ad(   dataset_id,   file,   overwrite = FALSE,   census_version = \"latest\" )"},{"path":"/reference/download_source_h5ad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download source H5AD to local file name. — download_source_h5ad","text":"dataset_id dataset_id interest. file Local file name store H5AD file. overwrite TRUE allow overwriting existing file. census_version census version.","code":""},{"path":"/reference/get_census_version_description.html","id":null,"dir":"Reference","previous_headings":"","what":"Get release description for given census version — get_census_version_description","title":"Get release description for given census version — get_census_version_description","text":"Get release description given census version","code":""},{"path":"/reference/get_census_version_description.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get release description for given census version — get_census_version_description","text":"","code":"get_census_version_description(census_version)"},{"path":"/reference/get_census_version_description.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get release description for given census version — get_census_version_description","text":"census_version census version name.","code":""},{"path":"/reference/get_census_version_description.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get release description for given census version — get_census_version_description","text":"List release location metadata","code":""},{"path":"/reference/get_census_version_directory.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the directory of cell census releases currently available — get_census_version_directory","title":"Get the directory of cell census releases currently available — get_census_version_directory","text":"Get directory cell census releases currently available","code":""},{"path":"/reference/get_census_version_directory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the directory of cell census releases currently available — get_census_version_directory","text":"","code":"get_census_version_directory()"},{"path":"/reference/get_census_version_directory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the directory of cell census releases currently available — get_census_version_directory","text":"Data frame available cell census releases, including location metadata.","code":""},{"path":"/reference/get_presence_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Read the feature dataset presence matrix. — get_presence_matrix","title":"Read the feature dataset presence matrix. — get_presence_matrix","text":"Read feature dataset presence matrix.","code":""},{"path":"/reference/get_presence_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read the feature dataset presence matrix. — get_presence_matrix","text":"","code":"get_presence_matrix(census, organism, measurement_name = \"RNA\")"},{"path":"/reference/get_presence_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read the feature dataset presence matrix. — get_presence_matrix","text":"census census object, usually returned cellxgene.census::open_soma(). organism organism query, usually one Homo sapiens Mus musculus measurement_name measurement object query. Defaults RNA.","code":""},{"path":"/reference/get_presence_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read the feature dataset presence matrix. — get_presence_matrix","text":"Matrix::sparseMatrix dataset join id & feature join id dimensions, filled 1s indicating presence","code":""},{"path":"/reference/get_seurat.html","id":null,"dir":"Reference","previous_headings":"","what":"Convenience wrapper around SOMAExperimentAxisQuery, to build and execute a\nquery, and return it as a Seurat object. — get_seurat","title":"Convenience wrapper around SOMAExperimentAxisQuery, to build and execute a\nquery, and return it as a Seurat object. — get_seurat","text":"Convenience wrapper around SOMAExperimentAxisQuery, build execute query, return Seurat object.","code":""},{"path":"/reference/get_seurat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convenience wrapper around SOMAExperimentAxisQuery, to build and execute a\nquery, and return it as a Seurat object. — get_seurat","text":"","code":"get_seurat(   census,   organism,   measurement_name = \"RNA\",   X_name = \"raw\",   obs_value_filter = NULL,   obs_coords = NULL,   obs_column_names = NULL,   var_value_filter = NULL,   var_coords = NULL,   var_column_names = NULL )"},{"path":"/reference/get_seurat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convenience wrapper around SOMAExperimentAxisQuery, to build and execute a\nquery, and return it as a Seurat object. — get_seurat","text":"census census object, usually returned cellxgene.census::open_soma(). organism organism query, usually one Homo sapiens Mus musculus measurement_name measurement object query. Defaults RNA. X_name X layer query. Defaults raw. obs_value_filter SOMA value_filter across columns obs dataframe, expressed string. obs_coords set coordinates obs dataframe index, expressed type format supported SOMADataFrame's read() method. obs_column_names Columns fetch obs data frame. var_value_filter obs_value_filter var. var_coords obs_coords var. var_column_names Columns fetch var data frame.","code":""},{"path":"/reference/get_seurat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convenience wrapper around SOMAExperimentAxisQuery, to build and execute a\nquery, and return it as a Seurat object. — get_seurat","text":"Seurat object containing sensus slice.","code":""},{"path":"/reference/get_source_h5ad_uri.html","id":null,"dir":"Reference","previous_headings":"","what":"Locate source h5ad file for a dataset. — get_source_h5ad_uri","title":"Locate source h5ad file for a dataset. — get_source_h5ad_uri","text":"Locate source h5ad file dataset.","code":""},{"path":"/reference/get_source_h5ad_uri.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Locate source h5ad file for a dataset. — get_source_h5ad_uri","text":"","code":"get_source_h5ad_uri(dataset_id, census_version = \"latest\")"},{"path":"/reference/get_source_h5ad_uri.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Locate source h5ad file for a dataset. — get_source_h5ad_uri","text":"dataset_id dataset_id interest. census_version census version.","code":""},{"path":"/reference/get_source_h5ad_uri.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Locate source h5ad file for a dataset. — get_source_h5ad_uri","text":"list uri optional s3_region.","code":""},{"path":"/reference/open_soma.html","id":null,"dir":"Reference","previous_headings":"","what":"Open the Cell Census — open_soma","title":"Open the Cell Census — open_soma","text":"Open Cell Census","code":""},{"path":"/reference/open_soma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open the Cell Census — open_soma","text":"","code":"open_soma(census_version = \"latest\", uri = NULL, tiledbsoma_ctx = NULL)"},{"path":"/reference/open_soma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Open the Cell Census — open_soma","text":"census_version version Census, e.g., \"latest\". uri URI containing Census SOMA objects. specified, takes precedence census_version. tiledbsoma_ctx custom tiledbsoma::SOMATileDBContext","code":""},{"path":"/reference/open_soma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Open the Cell Census — open_soma","text":"Top-level tiledbsoma::SOMACollection object","code":""}]
